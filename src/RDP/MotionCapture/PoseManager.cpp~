#include "PoseManager.h"
#include "ui_MotionCapture.h"
#include <boost/lambda/lambda.hpp>
#include <boost/bind.hpp>
#include <iostream>
#include <QFileDialog>
#include <boost/tuple/tuple.hpp>
#include <cassert>
#include <QMessageBox>

PoseManager::PoseManager(Ui::MotionCapture *ui) : 
    m_ui(ui),
    m_poseId(0)
{
    initJoints();
    connectSignals();
    onPushAddPose();
}

/*
void PoseManager::saveUserStatus(QGraphicsScene *scene){
    unsigned int poseId = m_ui->spinPoseId->value();
    m_scenes.insert(PoseScene::value_type(poseId, scene));
    //m_motion.setUserStatus(poseId, m_currentUserStatus);
    m_ui->graphicsStorage->setScene(scene);
}
*/

void PoseManager::showMessage(const QString &title, const QString &msg){
    std::cout << msg.toStdString() << std::endl;
    QMessageBox::critical(this, title, msg);

}

void PoseManager::setStoragePose(const RDP::UserPose &pose){
    assert(pose.joints.size() == nui::Motion::MAX_JOINT_NUM);
    m_pose = pose;
}

void PoseManager::onPushSavePose(){
    std::cout << "onPushSavePose" << std::endl;
    //m_motion.setPose(m_ui->spinPoseId->value(), m_joints);
    if(!m_motion.setPose(m_ui->spinPoseId->value(), m_pose)){
        RDP::UserPose pose;
        pose.joints.resize(nui::Motion::MAX_JOINT_NUM);
        assert(m_motion.addPose(m_ui->spinPoseId->value() ,pose));
    }
}

void PoseManager::onPushAddPose(){
    if(!m_motion.pose(m_poseId+1, m_pose)){
        RDP::UserPose pose;
        pose.joints.resize(nui::Motion::MAX_JOINT_NUM);
        assert(m_motion.addPose(m_poseId+1, pose));
        m_ui->spinPoseId->setValue(m_poseId+1);
    }
}

void PoseManager::onActionSave(){
	QString file = QFileDialog::getSaveFileName(this, "Save File", "/home", "Motion file (*.txt)");
	m_motion.saveAs(file.toStdString());
}

void PoseManager::onActionLoad(){
	QString file = QFileDialog::getOpenFileName(this, "Open File", "/home", "Motion file (*.txt)");
	if(m_motion.loadFrom(file.toStdString())){
		m_ui->spinPoseId->setValue(1);
		//assert(m_motion.pose(m_ui->spinPoseId->value(), m_pose));
		//assert(m_pose.joints.size() == nui::Motion::MAX_JOINT_NUM);
		showStoragePose();
	}else{
		showMessage("Error", "File does not exist");
	}
	//m_joints = m_motion.pose(m_ui->spinPoseId->value());
	//assert(m_joints.size() == nui::Motion::MAX_JOINT_NUM);
	//showStorageJoints();
}

void PoseManager::onSpinPoseidChanged(int id){
	
	if(m_motion.pose(id, m_pose)){
		m_poseId = id;
		assert(m_pose.joints.size() == nui::Motion::MAX_JOINT_NUM);
		showStoragePose();
	}else{
		m_ui->spinPoseId->setValue(m_poseId);
		showMessage("Error" ,QString("Does not exist pose%1").arg(id));
	}

	//TODO change scene
	//m_ui->graphicsStorage->setScene();
}

void PoseManager::onSpinJointChanged(double value){
	std::cout << "onSpinJointChanged" << std::endl;
	assert(nui::Motion::MAX_JOINT_NUM == m_spinboxes.size());
	
	for(int i=0; i < nui::Motion::MAX_JOINT_NUM; i++){
		if((QObject*)m_spinboxes[i] == sender()){
			if(m_ui->radioX->isChecked()){
				m_pose.joints[i].pos.x = m_spinboxes[i]->value();
				//m_joints[i].pos.x = m_spinboxes[i]->value();
				return;
			}else if(m_ui->radioY->isChecked()){
				m_pose.joints[i].pos.y = m_spinboxes[i]->value();
				return;
			}else if(m_ui->radioZ->isChecked()){
				m_pose.joints[i].pos.z = m_spinboxes[i]->value();
				return;
			}else{
				assert(false);
			}
		}
	}

	assert(false);
}

void PoseManager::onSpinTimeChanged(int value){
	std::cout << "onSpinTimeChanged" << std::endl;
	
	m_pose.waitTime = value;
}

void PoseManager::onCheckJointChanged(int state){
	assert(nui::Motion::MAX_JOINT_NUM == m_checkboxes.size());

	for(int i=0; i < nui::Motion::MAX_JOINT_NUM; i++){
		if((QObject*)m_checkboxes[i] == sender()){
			if(m_ui->radioX->isChecked()){
				std::cout << "m_joints[" << i << "].xIsKey = " << (state == Qt::Checked) << std::endl;				
				m_pose.joints[i].xIsKey = (state == Qt::Checked);
				return;
			}else if(m_ui->radioY->isChecked()){
				std::cout << "m_joints[" << i << "].yIsKey = " << (state == Qt::Checked) << std::endl;				
				m_pose.joints[i].yIsKey = (state == Qt::Checked);
				return;
			}else if(m_ui->radioZ->isChecked()){
				std::cout << "m_joints[" << i << "].zIsKey = " << (state == Qt::Checked) << std::endl;				
				m_pose.joints[i].zIsKey = (state == Qt::Checked);
				return;
			}else{
				assert(false);
			}
		}
	}

	assert(false);
}

void PoseManager::connectSignals(){
	connect(m_ui->spinPoseId, SIGNAL(valueChanged(int)), this, SLOT(onSpinPoseidChanged(int)));
	connect(m_ui->spinTime, SIGNAL(valueChanged(int)), this, SLOT(onSpinTimeChanged(int)));
	connect(m_ui->pushSavePose, SIGNAL(clicked()), this, SLOT(onPushSavePose()));
    connect(m_ui->pushAddPose, SIGNAL(clicked()), this, SLOT(onPushAddPose()));
	connect(m_ui->actionSave, SIGNAL(triggered()), this, SLOT(onActionSave()));
	connect(m_ui->actionLoad, SIGNAL(triggered()), this, SLOT(onActionLoad()));
	connect(m_ui->radioX, SIGNAL(clicked()), this, SLOT(showStoragePose()));
	connect(m_ui->radioY, SIGNAL(clicked()), this, SLOT(showStoragePose()));
	connect(m_ui->radioZ, SIGNAL(clicked()), this, SLOT(showStoragePose()));
	for(int i=0; i < nui::Motion::MAX_JOINT_NUM; i++){
		connect(m_spinboxes[i], SIGNAL(valueChanged(double)), this, SLOT(onSpinJointChanged(double)));
		connect(m_checkboxes[i], SIGNAL(stateChanged(int)), this, SLOT(onCheckJointChanged(int)));
	}
}

void PoseManager::initJoints(){
	m_spinboxes << m_ui->spinHead;
	m_spinboxes << m_ui->spinNeck;
	m_spinboxes << m_ui->spinTorso;
	m_spinboxes << m_ui->spinElbowL;
	m_spinboxes << m_ui->spinElbowR;
	m_spinboxes << m_ui->spinHipL;
	m_spinboxes << m_ui->spinHipR;
	m_spinboxes << m_ui->spinKneeL;
	m_spinboxes << m_ui->spinKneeR;
	m_spinboxes << m_ui->spinHandL;
	m_spinboxes << m_ui->spinHandR;
	m_spinboxes << m_ui->spinShoulderL;
	m_spinboxes << m_ui->spinShoulderR;
	m_spinboxes << m_ui->spinFootL;
	m_spinboxes << m_ui->spinFootR;
	
	m_checkboxes << m_ui->checkHead;
	m_checkboxes << m_ui->checkNeck;
	m_checkboxes << m_ui->checkTorso;
	m_checkboxes << m_ui->checkElbowL;
	m_checkboxes << m_ui->checkElbowR;
	m_checkboxes << m_ui->checkHipL;
	m_checkboxes << m_ui->checkHipR;
	m_checkboxes << m_ui->checkKneeL;
	m_checkboxes << m_ui->checkKneeR;
	m_checkboxes << m_ui->checkHandL;
	m_checkboxes << m_ui->checkHandR;
	m_checkboxes << m_ui->checkShoulderL;
	m_checkboxes << m_ui->checkShoulderR;
	m_checkboxes << m_ui->checkFootL;
	m_checkboxes << m_ui->checkFootR;
	
	m_pose.joints.resize(nui::Motion::MAX_JOINT_NUM);
}

void PoseManager::showStoragePose(){
	m_ui->spinTime->setValue(m_pose.waitTime);
	
	for(int i=0; i < nui::Motion::MAX_JOINT_NUM; i++){
		if(m_ui->radioX->isChecked()){
			m_spinboxes[i]->setValue(m_pose.joints[i].pos.x);
			m_checkboxes[i]->setCheckState(m_pose.joints[i].xIsKey ? Qt::Checked : Qt::Unchecked);
		}else if(m_ui->radioY->isChecked()){
			m_spinboxes[i]->setValue(m_pose.joints[i].pos.y);
			m_checkboxes[i]->setCheckState(m_pose.joints[i].yIsKey ? Qt::Checked : Qt::Unchecked);
		}else if(m_ui->radioZ->isChecked()){
			m_spinboxes[i]->setValue(m_pose.joints[i].pos.z);
			m_checkboxes[i]->setCheckState(m_pose.joints[i].zIsKey ? Qt::Checked : Qt::Unchecked);
		}else{
			assert(false);
		}
	}
}


